<html>
	<head>
		<title>Calendar</title>
		<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
		<link href="http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
		<script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
		<script src="http://code.jquery.com/jquery-migrate-1.2.1.min.js"></script>
		<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
		<script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
		<link href="css/datepicker.css" rel="stylesheet" type="text/css">
		<script src="js/bootstrap-datepicker.js"></script>
		<style>
		h1 {
			font-size:3em;
			text-align:center;
			color:#6C90A9;
		}
		
		body {
			background-color:#2B526A;
		}
		
		label {
			color:#6C90A9;
		}
		
		button {
			border:2px solid;
			border-radius:15px;
		}
		
		</style>
	</head>
	<body>
		<h1 id = "month"></h1>
		<script type="text/javascript">
			var url = "http://localhost:8080/";
			var User_email = "<%=user.google.email%>";
			
			var employeeDataObject;
			var shiftDataObject;
			var employees = [];
			var employeeMap = {};
			
			var colorscheme = {};
			colorscheme.gray = "#ECDCC4";
			colorscheme.green = "#00FF00";
			colorscheme.orange = "#F7931E";
			colorscheme.brown = "#B6421A";
			colorscheme.blue = "#6C90A9";
			
			
			$.ajax({
				url: url + "getEmployees",
				type: "GET",
				dataType: "json",
				async: false,
				contentType: "application/json",
				success: function(response) {
					console.log(response);
					employeeDataObject = response;
					for(var i = 0; i < employeeDataObject.length; i++) {
						var temp = employeeDataObject[i];
						var tempEmployee = new Employee(temp.User_email, temp.firstname, temp.lastname, temp.email, temp.phone);
						employees.push(tempEmployee);
						employeeMap[temp.email] = tempEmployee;
					}
				}
			});
			
			$.ajax({
				url: url + "getShifts",
				type: "GET",
				dataType: "json",
				async: false,
				contentType: "application/json",
				success: function(response) {
					shiftDataObject = response;
					console.log(response);
				}
			});
			
			console.log(employees);
			console.log(employeeMap);


			var width = window.innerWidth - 30;
			var height = window.innerHeight - 300;
			var colors = [];
			
			var startHour = 9;
			var numHours = 9;
			
			var hours = [];
			var monthData = [];
			
			for(var i = 0; i < numHours; i++) {
				var hour = (startHour + i)%12;
				if(hour == 0)
					hour = 12;
				hours.push(hour + ":00");
				hours.push(hour + ":30");
			}
			
			function Employee(User_email, firstName, lastName, email, phoneNumber) {
				this.User_email = User_email;
				this.firstName = firstName;
				this.lastName = lastName;
				this.email = email;
				this.phoneNumber = phoneNumber;
				this.color = getRandomColor();
			}
		
			
			function getRandomColor() {
				var letters = '0123456789ABCDEF'.split('');
				var color = '#';
				for (var i = 0; i < 6; i++ ) {
					color += letters[Math.round(Math.random() * 15)];
				}	
				return color;
			}	
			
			function Shift(startTime, endTime, employee, date, saved) {
				this.saved = saved;
				this.date = date;
				this.day = date.getDate();
				this.month = date.getMonth();
				this.year = date.getFullYear();
				this.endIndex = endTime;
				this.endTime = hours[endTime];
				this.startIndex = startTime;
				this.startTime = hours[startTime];
				this.employee = employee
			}
			
			function Day(date) {
				this.date = date;
				this.shifts = [];
				this.employees = [];
			} 

			var today = new Date();
			
			var currentDate = new Date();
			currentDate.setDate(1);
			var selectedDate = new Date(currentDate);
			
			
			buildCalendar(currentDate);
			
			function buildCalendar(day) {

				var month = day.getMonth();
				
				day.setDate(1);

				
				var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
				
				var data = [];
				
				if(monthData.length > selectedDate.getMonth() - currentDate.getMonth() + (selectedDate.getFullYear() - currentDate.getFullYear()) * 12) {
					data = monthData[selectedDate.getMonth() - currentDate.getMonth() + (selectedDate.getFullYear() - currentDate.getFullYear()) * 12];	
				}
				else {
					var firstDay = day.getDay();
					for(var i = 0; i < firstDay; i++)
						data.push(null);

					while(day.getMonth() == month) {
						var temp = new Date(day.toDateString());
						data.push(new Day(temp));
						day.setDate(day.getDate() + 1);
					}
				
					day.setDate(day.getDate() - 1);
				
					var lastDay = day.getDay();
					for(var i = lastDay; i < 6; i++)
						data.push(null);
					
					monthData.push(data);
					
					for(var j = firstDay; j < data.length - 6 + lastDay; j++) {
						for(var k = 0; k < shiftDataObject.length; k++) {
							var tempA = data[j].date;
							var tempB = shiftDataObject[k];
							if(tempA.getDate() == tempB.date._day && tempA.getMonth() == tempB.date.month && tempA.getFullYear() == tempB.date.year)
								data[j].shifts.push(new Shift(tempB.shiftStartIndex, tempB.shiftEndIndex, employeeMap[tempB.employee_email], tempA, true));
						}
					}
				}
			
				
				
				day.setDate(1);
			
			
				console.log(data);

				function getMonthString(month) {
					switch(month) {
						case 0:
							return "January";
						case 1:
							return "February";
						case 2:
							return "March";
						case 3:
							return "April";
						case 4:
							return "May";
						case 5:
							return "June";
						case 6:
							return "July";
						case 7:
							return "August";
						case 8:
							return "September";
						case 9:
							return "October";
						case 10:
							return "November";
						case 11:
							return "December";
					}
				}

				var monthString = getMonthString(month);

				document.getElementById("month").innerHTML = monthString + " " + selectedDate.getFullYear();

				var numRows = data.length/7;

				var cd;

				var xScale = d3.scale.linear()
					.domain([0,7])
					.range([0, width])
					.nice();

				var dateYScale = d3.scale.linear()
					.domain([0, numRows])
					.range([0, height])
					.nice();

				var dayYScale = d3.scale.linear()
					.domain([0,1])
					.range([0, 60])
					.clamp(true)
					.nice();

				var daysOfWeek = d3.select("body").append("svg")
					.attr("width", width)
					.attr("height", 60);

				var calendar = d3.select("body").append("svg")
					.attr("width", width)
					.attr("height", height);

				var dayRects = daysOfWeek.selectAll("rect")
					.data(weekdays)
					.enter()
					.append("rect");

					dayRects.attr("x", function(d, i) {
						return xScale(i);
					})
					.attr("width", function(d, i) {
						return xScale(i+1) - xScale(i);
					})
					.attr("height", 60)
					.attr("fill", "white")
					.attr("stroke", colorscheme.brown)
					.attr("stroke-width", 3);


				var dayText = daysOfWeek.selectAll("text")
					.data(weekdays)
					.enter()
					.append("text");

				dayText.attr("x", function(d,i) {
						return xScale(i + .5);
					})
					.attr("text-anchor", "middle")
					.attr("font-size", "2.5em")
					.attr("y", dayYScale(2/3))
					.attr("fill", colorscheme.orange)
					.text(function(d) {
						return d;
					});


				var dateRects = calendar.selectAll("rect")
					.data(data)
					.enter()
					.append("rect")
					.attr("x", function(d,i) {
						return xScale(i % 7);
					})
					.attr("y", function(d,i) {
						return dateYScale(Math.round(Number(i/7 - .5)));
					})
					.attr("width", function(d, i) {
						return xScale(i % 7 + 1) - xScale(i % 7);
					})
					.attr("height", function(d, i) {
						return dateYScale(Math.round(Number(i/7 - .5)) + 1) - dateYScale(Math.round(Number(i/7 - .5)));
					})
					.attr("fill", function(d) { 
						if(d != null) { 
							if(d.shifts.length > 0) 
								return colorscheme.green; 
							else 
								return "white";
						}
						else
							return colorscheme.gray;
					})
					.style("fill-opacity", function(d) {
						if(d != null) { 
							if(d.shifts.length > 0) 
								return .3; 
							else 
								return 1;
						}
						else
							return 1;
					})
					.attr("stroke", colorscheme.brown)
					.attr("stroke-width", 3)
					.on("click", click);

				var dateText = calendar.selectAll("text")
					.data(data)
					.enter()
					.append("text")
					.attr("x", function(d,i) {
						return xScale(i % 7 + .05);
					})
					.attr("fill", colorscheme.orange)
					.style("pointer-events", "none")
					.attr("text-anchor", "left")
					.attr("font-size", function() { return height / 400 + "em"; })
					.attr("y", function(d,i) {
						return dateYScale(Math.round(Number(i/7 - .5)) + .2);
					})
					.text(function(d) {
						if(d != null)
						return d.date.getDate();
					});

				var zoomXScale = d3.scale.linear()
					.range([0, width])
					.nice();

				var zoomYScale = d3.scale.linear()
					.range([0, height])
					.nice();
					

				function dayTween(d, func) {
					var xd = d3.interpolate(xScale.domain(), zoomXScale.domain());
					return function(d,i) {
						return function(t) {
							xScale.domain(xd(t));
							return func(d,i);
						}
					}
				}

				function dateTween(d, i, func) {
					var xd = d3.interpolate(xScale.domain(), zoomXScale.domain());
					var yd = d3.interpolate(dateYScale.domain(), zoomYScale.domain());
					return function(d,i) {
						return function(t) {
							xScale.domain(xd(t));
							dateYScale.domain(yd(t));
							return func(d,i);
						}
					}
				}

				function reverseDayTween(d,func) {
					var xd = d3.interpolate(xScale.domain(), [0,7]);
					return function(d,i) {
						return function(t) {
							xScale.domain(xd(t));
							return func(d,i);
						}
					}
				}

				function reverseDateTween(d, i, func) {
					var xd = d3.interpolate(xScale.domain(), [0, 7]);
					var yd = d3.interpolate(dateYScale.domain(), [0, numRows]);
					return function(d, i) {
						return function(t) {
							xScale.domain(xd(t));
							dateYScale.domain(yd(t));
							return func(d,i);
						}
					}
				}
				
				function createArrows() {
					calendar.append("text")
						.attr("id", "rightArrow")
						.attr("font-family", "FontAwesome")
						.attr("font-size", "4em")
						.text(function(d) { return "\uf061" })
						.attr("x", width - 60)
						.attr("y", height/2)
						.style("cursor", "pointer")
						.style("opacity", .5)
						.on("click", function(d, i) {
							if(selectedDate.getMonth() != 11) {
								selectedDate.setMonth(selectedDate.getMonth() + 1);
							}
							else {
								selectedDate.setFullYear(selectedDate.getFullYear() + 1);
								selectedDate.setMonth(0);
							}
							daysOfWeek.remove();
							calendar.remove();
							deleteDatePicker();
							buildCalendar(selectedDate);
						});
						
					if(selectedDate.getTime() != currentDate.getTime()) {	
						calendar.append("text")
							.attr("id", "leftArrow")
							.attr("font-family", "FontAwesome")
							.attr("font-size", "4em")
							.text(function(d) { return "\uf060" })
							.attr("x", 10)
							.attr("y", height/2)
							.style("cursor", "pointer")
							.style("opacity", .5)
							.on("click", function(d, i) {
								if(selectedDate.getMonth() != 0) {
									selectedDate.setMonth(selectedDate.getMonth() - 1);
								}
								else {
									selectedDate.setFullYear(selectedDate.getFullYear() - 1);
									selectedDate.setMonth(11);
								}
								daysOfWeek.remove();
								calendar.remove();
								deleteDatePicker();
								buildCalendar(selectedDate);
							});
					}
				}
				
				function deleteArrows() {
					calendar.select("#rightArrow").remove();
					calendar.select("#leftArrow").remove();
				}
				
				
				function buildDatePicker() {
				 	var datePickerDiv = d3.select("body").append("div").attr("id", "datePickerDiv").style("text-align", "center").style("margin-top", 20);
					datePickerDiv.append("label").attr("for", "startDate").text("Start Date: ").attr("color", colorscheme.blue);
					datePickerDiv.append("input").attr("type", "text").attr("id", "startDate").style("margin-left", 10);
					datePickerDiv.append("label").attr("for", "endDate").text("End Date: ").style("margin-left", 20).attr("color", colorscheme.blue);
					datePickerDiv.append("input").attr("type", "text").attr("id", "endDate").style("margin-left", 10);
					var startPicker = jQuery("#startDate");
					startPicker.datepicker({
						startDate:today,
						autoclose:true
					}).on("changeDate", function() {
						console.log(startPicker.datepicker("getDate"));
						endPicker.datepicker("setStartDate", startPicker.datepicker("getDate"));
					});
					var endPicker = jQuery("#endDate");
					endPicker.datepicker({
						startDate:today,
						autoclose:true
					}).on("changeDate", function() {
						startPicker.datepicker("setEndDate", endPicker.datepicker("getDate"));
					});
					
					datePickerDiv.append("input").attr("type", "button").attr("value", "Send").style("margin-left", 10).on("click", function() {
						var startDate = new Date(startPicker.datepicker("getDate"));
						var endDate = new Date(endPicker.datepicker("getDate"));
						var shiftDates = {};
						shiftDates.startDay = startDate.getDate();
						shiftDates.startMonth = startDate.getMonth();
						shiftDates.startYear = startDate.getFullYear();
						shiftDates.endDay = endDate.getDate();
						shiftDates.endMonth = endDate.getMonth();
						shiftDates.endYear = endDate.getFullYear();
						
						$.ajax({
							url: url + "sendShifts" ,
							type: 'POST' ,
							contentType: 'application/json' ,
							data: JSON.stringify(shiftDates)  //stringify is important
						});
					});
					
					datePickerDiv.append("input").attr("type", "button").attr("value", "Save").style("margin-left", 10).on("click", function() {
						var startDate = new Date(startPicker.datepicker("getDate"));
						var endDate = new Date(endPicker.datepicker("getDate"));
						var startDateTemp = new Date(startDate);
						startDateTemp.setDate(1);
						var day = startDateTemp.getDay();
						var shiftsToSend = [];
						var monthDataIndex = startDate.getMonth() - today.getMonth() + (startDate.getFullYear() - today.getFullYear()) * 12;
						var month = startDate.getMonth();
						var dateIndex = startDate.getDate() - 1 + day;
						while(startDate.getTime() <= endDate.getTime()) {
							if(month != startDate.getMonth()) {
								monthDataIndex++;
								month++;
								dateIndex = startDate.getDay();
							}	
							for(var i = 0; i < monthData[monthDataIndex][dateIndex].shifts.length; i++) {
								if(monthData[monthDataIndex][dateIndex].shifts[i].saved == false)
									shiftsToSend.push(monthData[monthDataIndex][dateIndex].shifts[i])
							}
							dateIndex++;
							startDate.setDate(startDate.getDate() + 1);
						}
						$.ajax({
							url: url + "saveShifts" ,
							type: 'POST' ,
							contentType: 'application/json' ,
							data: JSON.stringify(shiftsToSend)  //stringify is important
						});
					});
				}
				
				function deleteDatePicker() {
					d3.select("#datePickerDiv").remove();
				}
				
				
				
				buildDatePicker();
				
				createArrows();

				function click(d, i) {
					if(d == null)
						return;
					calendar.select("#employeeBox").remove();
					calendar.select("#hourBox").remove();
					calendar.select("#shiftBox").remove();
					if(cd == d) {
						createArrows();
						deleteEmployeeAdder();
						buildDatePicker();
						cd = null;
						dayRects.transition()
							.duration(750)
							.attrTween("x", reverseDayTween(d, function(d,i) { return xScale(i); } ))
							.attrTween("width", reverseDayTween(d, function(d,i) { return xScale(i + 1) - xScale(i); } ));
						dayText.transition()
							.duration(750)
							.attrTween("x", reverseDayTween(d, function(d, i) { return xScale(i + .5); } ));
						dateRects.transition()
							.duration(750)
							.attrTween("width", reverseDateTween(d, i, function(d,i) { return xScale(i % 7 + 1) - xScale(i % 7); } ))
							.attrTween("x", reverseDateTween(d, i, function(d,i) { return xScale(i % 7); } ))
							.attrTween("y", reverseDateTween(d, i, function(d,i) { return dateYScale(Math.round(Number(i/7 - .5))); } ))
							.attrTween("height", reverseDateTween(d, i, function(d,i) { return dateYScale(Math.round(Number(i/7 - .5)) + 1) - dateYScale(Math.round(Number(i/7 - .5))); } ))
							.attr("fill", function(d) { 
								if(d != null) { 
									if(d.shifts.length > 0) 
										return colorscheme.green; 
									else 
										return "white";
								}
								else
									return colorscheme.gray;
							})
							.attr("opacity", function(d) {
								if(d != null) { 
									if(d.shifts.length > 0) 
										return .3; 
									else 
										return 1;
								}
								else
									return 1;
							});
						dateText.transition()
							.duration(750)
							.attrTween("x", reverseDateTween(d, i, function(d,i) { return xScale(i % 7 + .05); } ))
							.attrTween("y", reverseDateTween(d, i, function(d,i) { return dateYScale(Math.round(Number(i/7 - .5)) + .2); } ))
							.attrTween("font-size", reverseDateTween(d, i, function(d,i) { return height / 400 + "em"; } ))
							.style("fill", colorscheme.orange);

					}
					else {
						deleteArrows();
						deleteDatePicker();
						deleteEmployeeAdder();
						buildEmployeeAdder();
						cd = d;
						var modci = i % 7;
						var ci = i;

						zoomXScale.domain([d.date.getDay() - .15, d.date.getDay() + 1.15]);
						zoomYScale.domain([Math.round(Number(i/7 - .5)) - .25, Math.round(Number(i/7 - .5)) + 1.25]);

						dayRects.transition()
							.duration(750)
							.attrTween("x", dayTween(d, function(d,i) { return xScale(i); } ))
							.attrTween("width", dayTween(d, function(d,i) { return xScale(i + 1) - xScale(i); } ));
						dayText.transition()
							.duration(750)
							.attrTween("x", dayTween(d, function(d, i) { 
								if(i > modci)
									return xScale(i + .08);
								else if(i < modci)
									return xScale(i + .92);
								else
									return xScale(i + .5);
							}));

						dateRects.transition()
							.duration(750)
							.attrTween("width", dateTween(d, i, function(d,i) { return xScale(i % 7 + 1) - xScale(i % 7); } ))
							.attrTween("x", dateTween(d, i, function(d,i) { return xScale(i % 7); } ))
							.attrTween("y", dateTween(d, i, function(d,i) { return dateYScale(Math.round(Number(i/7 - .5))); } ))
							.attrTween("height", dateTween(d, i, function(d,i) { return dateYScale(Math.round(Number(i/7 - .5)) + 1) - dateYScale(Math.round(Number(i/7 - .5))); } ));
						dateText.transition()
						.duration(750)
						.attrTween("x", dateTween(d, i, function(d,i) { if(i % 7 < modci) return xScale(i % 7 + .94); else return xScale(i % 7 + .01); } ))
						.attrTween("y", dateTween(d, i, function(d,i) { 
							if( Math.round(Number(i/7 - .5)) < Math.round(Number(ci/7 - .5)) ) 
								return dateYScale(Math.round(Number(i/7 - .5)) + .95); 
							else 
								return dateYScale(Math.round(Number(i/7 - .5)) + .1);
						} ))
						.attr("font-size", function() { return height / 200 + "em"; } )
						.style("fill", function(d) { if(d == cd) return colorscheme.orange; else return colorscheme.gray; });

						var selected = null;
						var selectedIndex = null;
						var startTime = null;
						var endTime = null;
						
						function buildEmployeeBox() {
							var employeeBox = calendar.append("g")
								.attr("id", "employeeBox")
								.attr("transform", function() {
									return "translate (" + zoomXScale(modci + .01) + "," + zoomYScale(Math.round(Number(ci/7 - .5)) + .15) + ")";
								});

							employeeBox.append("rect")
								.attr("width", function() { return zoomXScale(modci + .15) - zoomXScale(modci + .01); } )
								.attr("height", function() { return zoomYScale(Math.round(Number(ci/7 - .5)) + .99) - zoomYScale(Math.round(Number(ci/7 - .5)) + .15); } )
								.attr("fill", "white")
								.attr("stroke", colorscheme.brown)
								.attr("stroke-width", 2);

							var boxScale = d3.scale.linear()
								.domain([0, employees.length])
								.range([60, zoomYScale(Math.round(Number(ci/7 - .5)) + .99) - zoomYScale(Math.round(Number(ci/7 - .5)) + .2)]);
								
								employeeBox.append("text")
								.text("Employees")
								.attr("x", 10)
								.attr("y", 30)
								.attr("fill", colorscheme.orange)
								.attr("font-weight", "bold")
								.style("font-size", 20)
								.style("text-decoration", "underline");
							

							var employeeTextObjs = employeeBox.selectAll("g")
								.data(employees)
								.enter()
								.append("g")
								.attr("transform", function(d,i) {
								 	return "translate (4," + boxScale(i) + ")"
								})
							
							var employeeHighlight = employeeTextObjs.append("rect")
								.attr("fill", "yellow")
								.attr("opacity", 0)
								.attr("y", -16)
								.attr("x", -2)
								.attr("width", function() { return zoomXScale(modci + .15) - zoomXScale(modci + .01) - 3; } )
								.attr("height", 20);
							
								employeeTextObjs.append("text")
								.attr("fill", function(d,i) { return d.color;})
								.text(function(d) {
									return d.firstName;
								})
								.style("font-size", 20)
								.attr("x", 10)
								.attr("font-weight", "bold")
								.style("cursor", "pointer")
								.on("click", function(d, i) {
									selected = d;
									selectedIndex = i;
									employeeHighlight.attr("opacity", function(d,i) { if(i == selectedIndex) return 1; else return 0; });
								});
								
								employeeTextObjs.append("text")
									.attr("font-family", "FontAwesome")
									.text(function(d) { return "\uf00d" })
									.attr("x", 0)
									.attr("y", -10)
									.style("cursor", "pointer")
									.on("click", function(d, i) {
										employees.splice(i, 1);
										d3.select("#employeeBox").remove();
										buildEmployeeBox();
									});
						}
						
						buildEmployeeBox();
						
						function deleteEmployeeBox() {
							d3.select("#employeeBox").remove();
						}
						
				
						function buildEmployeeAdder() {
							var employeeAdderDiv = d3.select("body").append("div").attr("id", "employeeAdderDiv").style("text-align", "center").style("margin-top", 20);
							employeeAdderDiv.append("label").attr("for", "firstName").text("First Name: ").attr("color", colorscheme.blue);
							var firstName = employeeAdderDiv.append("input").attr("type", "text").attr("id", "firstName").style("margin-left", 10);
							employeeAdderDiv.append("label").attr("for", "lastName").text("Last Name: ").style("margin-left", 20).attr("color", colorscheme.blue);
							var lastName = employeeAdderDiv.append("input").attr("type", "text").attr("id", "lastName").style("margin-left", 10);
							employeeAdderDiv.append("label").attr("for", "email").text("Email Address: ").style("margin-left", 20).attr("color", colorscheme.blue);
							var email = employeeAdderDiv.append("input").attr("type", "text").attr("id", "email").style("margin-left", 10);
							employeeAdderDiv.append("label").attr("for", "phoneNumber").text("Phone Number: ").style("margin-left", 20).attr("color", colorscheme.blue);
							var phoneNumber = employeeAdderDiv.append("input").attr("type", "text").attr("id", "phoneNumber").style("margin-left", 10);
							employeeAdderDiv.append("input").attr("type", "button").attr("value", "Add Employee").style("margin-left", 10).on("click", function() {
								if(document.getElementById("email").value != "" && document.getElementById("firstName").value != ""
									&& document.getElementById("lastName").value != "" && document.getElementById("phoneNumber").value != "") {
									var tempEmployee = new Employee(User_email,document.getElementById("firstName").value, document.getElementById("lastName").value, document.getElementById("email").value, document.getElementById("phoneNumber").value);
									employees.push(tempEmployee);
									employeeMap[tempEmployee.email] = tempEmployee;
									document.getElementById("firstName").value = "";
									document.getElementById("lastName").value = "";
									document.getElementById("email").value = "";
									document.getElementById("phoneNumber").value = "";
									deleteEmployeeBox();
									buildEmployeeBox();
                                    $.post(url + "addEmployee", employees[employees.length -1]);
                                    console.log(url + "addEmployee");
                                    console.log(employees[employees.length -1]);
								}
								else
									alert("Must enter in a valid first name, last name, email address, and phone number for employees");
							});
						}
				
						function deleteEmployeeAdder() {
							d3.select("#employeeAdderDiv").remove();
						}
							
						var hourBox = calendar.append("g")
							.attr("id", "hourBox")
							.attr("transform", function() {
								return "translate (" + zoomXScale(modci + .2) + "," + zoomYScale(Math.round(Number(ci/7 - .5)) + .01) + ")";
							});
							
						var shiftBox = calendar.append("g")
							.attr("id", "shiftBox")
							.attr("transform", function() {
								return "translate (" + zoomXScale(modci + .2) + "," + zoomYScale(Math.round(Number(ci/7 - .5)) + .01) + ")";
							});
							
						var hourBoxScale = d3.scale.linear()
							.domain([0, hours.length])
							.range([0, zoomYScale(Math.round(Number(ci/7 - .5)) + .98) - zoomYScale(Math.round(Number(ci/7 - .5) + .01))]).nice();
							
						var hourBoxes = hourBox.selectAll("g").data(hours).enter().append("g")
							.attr("transform", function(d,i) { return "translate (" + 0 + "," + hourBoxScale(i) + ")"; });
							
						
						var shiftScale = d3.scale.linear()
							.domain([0, cd.shifts.length])
							.range([zoomXScale(modci + .25) - zoomXScale(modci + .2), zoomXScale(modci + .99) - zoomXScale(modci + .2)]);
							
						var shiftBoxes;
							
						function createShiftboxes() {
							shiftBoxes = shiftBox.selectAll("g")
								.data(cd.shifts)
								.enter()
								.append("g")
								.attr("transform", function(d,i) { return "translate (" + shiftScale(i) + "," + hourBoxScale(d.startIndex) + ")"; });
							
							shiftBoxes.append("rect")
								.attr("width", function(d, i) { return shiftScale(i + 1) - shiftScale(i); })
								.attr("height", function(d) { return hourBoxScale(d.endIndex + 1 - d.startIndex); })
								.style("opacity", .5)
								.style("pointer-events", "none")
								.attr("fill", function(d) { return d.employee.color; });
								
							shiftBoxes.append("text")
								.attr("font-family", "FontAwesome")
								.text(function(d) { return "\uf00d" })
								.attr("x", 2)
								.attr("y", 15)
								.style("cursor", "pointer")
								.on("click", function(d, i) {
									cd.shifts.splice(i, 1);
									shiftScale.domain([0, cd.shifts.length]);
									shiftBoxes.remove();
									createShiftboxes();
								});
						}
						
						createShiftboxes();
							
						hourBoxes.append("rect")
							.attr("width", function() { return zoomXScale(modci + .99) - zoomXScale(modci + .2); })
							.attr("height", function(d, i) { return hourBoxScale(i + 1) - hourBoxScale(i); })
							.attr("fill", "white")
							.attr("stroke", colorscheme.brown)
							.style("pointer-events", "auto")
							.style("cursor", "pointer")
							.on("click", function(d, i) {
								if(selected != null) {
									if(startTime != null) {
										endTime = i;
										cd.shifts.push(new Shift(startTime, endTime, selected, cd.date, false));
										cd.employees.push(selected);
										shiftScale.domain([0, cd.shifts.length]);
										shiftBoxes.remove();
										
										createShiftboxes();
										
										endTime = null;
										startTime = null;
									}
									else
										startTime = i;
								}
							});
							
							
						hourBoxes.append("text")
							.text(function(d) { return d; })
							.attr("x", 2)
							.attr("y", function(d, i) { return hourBoxScale(i + .75) - hourBoxScale(i); })
							.attr("fill", colorscheme.orange)
							.style("font-size", 10);
					}
				}
				
			}


</script>
</body>
</html>
